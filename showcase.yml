openapi: 3.0.1
info:
  title: COMP2001HK Showcase
  description: An ASP.NET Core Web API for Assessment CW2 Task 1
  contact:
    name: GitHub Repository
    url: https://github.com/hkuspace-pu/assessment-2-htlo-plymouth
  version: v1
paths:
  /api/Authentication/login:
    post:
      tags:
        - Authentication
      summary: User login
      operationId: Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginModel'
          text/json:
            schema:
              $ref: '#/components/schemas/LoginModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LoginModel'
      responses:
        '200':
          description: Login Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '401':
          description: Login Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /api/Authentication/register:
    post:
      tags:
        - Authentication
      summary: New user register
      operationId: Register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterModel'
          text/json:
            schema:
              $ref: '#/components/schemas/RegisterModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RegisterModel'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '500':
          description: User created failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /api/Authentication/admin-register:
    post:
      tags:
        - Authentication
      summary: New admin register
      operationId: AdminRegister
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterModel'
          text/json:
            schema:
              $ref: '#/components/schemas/RegisterModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RegisterModel'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '500':
          description: User created failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /api/Programmes:
    get:
      tags:
        - Programmes
      summary: List all programmes with registed students
      operationId: GetProgrammes
      responses:
        '200':
          description: Request Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Programme'
    post:
      tags:
        - Programmes
      summary: Create a new programme
      operationId: PostProgramme
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgrammeDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ProgrammeDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProgrammeDto'
      responses:
        '204':
          description: Request Successful
  /api/Programmes/{id}:
    get:
      tags:
        - Programmes
      summary: List programme by specify ID
      operationId: GetProgramme
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Request Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Programme'
        '404':
          description: Programme not found
    put:
      tags:
        - Programmes
      summary: Update an existing programme
      operationId: PutProgramme
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgrammeDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ProgrammeDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProgrammeDto'
      responses:
        '204':
          description: Success
        '400':
          description: Invalid ID
        '404':
          description: Programme not found
    delete:
      tags:
        - Programmes
      summary: Delete programme
      operationId: DeleteProgramme
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Programme deleted
        '404':
          description: Programme not found
  /api/Students:
    get:
      tags:
        - Students
      summary: Get all students information
      operationId: GetStudents
      responses:
        '200':
          description: Request Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
    post:
      tags:
        - Students
      summary: Register a new statudent
      operationId: PostStudent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentDto'
          text/json:
            schema:
              $ref: '#/components/schemas/StudentDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/StudentDto'
      responses:
        '200':
          description: Request Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
  /api/Students/{id}:
    get:
      tags:
        - Students
      summary: Get students information by specify ID
      operationId: GetStudent
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Request Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        '404':
          description: Student not found
    put:
      tags:
        - Students
      summary: Update an existing student
      operationId: PutStudent
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentDto'
          text/json:
            schema:
              $ref: '#/components/schemas/StudentDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/StudentDto'
      responses:
        '204':
          description: Success
        '400':
          description: Invalid ID
        '404':
          description: Student not found
    delete:
      tags:
        - Students
      summary: Delete student
      operationId: DeleteStudent
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Request Successful
        '404':
          description: Not Found
  /api/Students/{id}/Programme/{code}:
    post:
      tags:
        - Students
      summary: Student enroll a programme
      operationId: StudentRegisterProgramme
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: code
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Registed programme successfully
    delete:
      tags:
        - Students
      summary: Remove student from programme
      operationId: DeleteStudentFromPgramme
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: code
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Deregisted programme
        '404':
          description: Data not found
components:
  schemas:
    LoginModel:
      type: object
      properties:
        username:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    Programme:
      type: object
      properties:
        id:
          type: integer
          format: int32
        programme_code:
          type: string
          nullable: true
        programme_title:
          type: string
          nullable: true
        students:
          type: array
          items:
            $ref: '#/components/schemas/Student'
          nullable: true
      additionalProperties: false
    ProgrammeDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        programme_code:
          type: string
          nullable: true
        programme_title:
          type: string
          nullable: true
      additionalProperties: false
    RegisterModel:
      type: object
      properties:
        username:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    Response:
      type: object
      properties:
        status:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
      additionalProperties: false
    Student:
      type: object
      properties:
        student_id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        programmes:
          type: array
          items:
            $ref: '#/components/schemas/Programme'
          nullable: true
      additionalProperties: false
    StudentDto:
      type: object
      properties:
        student_id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: http
      description: Authorization header using the Bearer Token.
      scheme: Bearer
security:
  - Bearer: []
